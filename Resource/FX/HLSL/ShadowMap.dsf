
cbuffer ShadowMapGen
{
	matrix ShadowMapWorld;
	matrix ShadowMapView; 
	matrix ShadowMapProj;
}

 
struct VS_INPUT
{
    float4 position : POSITION;
};

struct VS_OUTPUT
{
    float4 position : SV_POSITION;
    float4 depthPosition : TEXTURE0;
};


////////////////////////////////////////////////////////////////////////////////
// Vertex Shader
////////////////////////////////////////////////////////////////////////////////
VS_OUTPUT DepthVertexShader(VS_INPUT input)
{
    VS_OUTPUT output;
 
	// Change the position vector to be 4 units for proper matrix calculations.
    input.position.w = 1.0f;

	// Calculate the position of the vertex against the world, view, and projection matrices.
    output.position = mul(ShadowMapWorld,input.position);
    output.position = mul(ShadowMapView,output.position);
    output.position = mul(ShadowMapProj,output.position);

	// Store the position value in a second input value for depth value calculations.
	output.depthPosition = output.position;
	
	return output;
}

float DepthPixelShader(VS_OUTPUT input) : SV_TARGET
{
	float depthValue;
	float4 color;
 
	// Get the depth value of the pixel by dividing the Z pixel depth by the homogeneous W coordinate.
	depthValue = input.depthPosition.z / input.depthPosition.w;

	color = depthValue; //float4(depthValue, depthValue, depthValue, 1.0f);

	return color;
}