Texture2D<float> GBufferDepthTexture;
Texture2D<float4> GBufferColorSpecIntTexture;
Texture2D<float3> GBufferNormalTexture;
Texture2D<float4> GBufferSpecPowTexture;
SamplerState    GBufferPointSampler;

struct GBufferData
{
	float LinearDepth;
	float3 Color;
	float3 Normal;
	float3 SpecularColor;
	float Shiness;
};

float3 DecodeNormal(float2 encodedNormal)
{
    float4 decodedNormal = encodedNormal.xyyy * float4(2,2,0,0) + float4(-1,-1,1,-1);
    decodedNormal.z = dot(decodedNormal.xyz, -decodedNormal.xyw);
    decodedNormal.xy *= sqrt(decodedNormal.z);
    return decodedNormal.xyz * 2.0 + float3(0.0, 0.0, -1.0);
}

float ConvertZToLinearDepth(float depth)
{
	float linearDepth = PerspectiveValues.z / (depth + PerspectiveValues.w);
	return linearDepth;
}

float3 CalcWorldPos(float2 csPos, float depth)
{
	float4 position;

	position.xy = csPos.xy * PerspectiveValues.xy * depth;
	position.z = depth;
	position.w = 1.0;
	
	return mul(position, ViewInv).xyz;
}
