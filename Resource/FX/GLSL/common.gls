layout(std140) uniform SceneProperty
{
	int    ScreenWidth;
	int    ScreenHeight;
	int    ShadowMapSize;
	vec3 AmbientLowColor;
	vec3 AmbientUpperColor;
	float    LineRadius;

};

layout(std140) uniform CameraTransforms
{
	mat4 CameraView;
	mat4 CameraProjection;	
	mat4 CameraViewProj;
    mat4 CameraViewInv;
	mat4 CameraProjInv;
	mat4 CameraViewProjInv;
	vec3 CameraPosition;
};

layout(std140) uniform ShadowMapGen
{
	mat4 ShadowMapView; 
	mat4 ShadowMapViewArray[6];
	mat4 ShadowMapProj;
};

layout(std140) uniform ObjectTransform
{
	mat4 WorldTransform;
	mat4 WorldNormalTransform;  // translate for normal.
};

layout(std140) uniform MaterialProperty
{
	vec3 DiffuseColor;
	vec3 SpecularColor;
	vec3 EmissiveColor;
	float SpecularExp;	
};

uniform sampler2D DiffuseTexture;
uniform sampler2DShadow ShadowMapTexture2D;
uniform samplerCube ShadowMapTextureCube;

layout(std140) uniform DirectionLightProperty
{
	vec3 DirectionLightColor;
	vec3 DirectionLightDir;	
	float DirectionLightIntensity;
	bool  DirectionLightCastShadow;
} ;

layout(std140) uniform PointLightProperty
{
    vec3 PointLightPos;
	vec3 PointLightColor;
	float PointLightIntensity;
	float PointLightRangeRcp;
	bool  PointLightCastShadow;
};

layout(std140) uniform SpotLightProperty
{
   vec3 SpotLightPos;
   vec3 SpotLightDir;
   vec3 SpotLightColor;
   float SpotLightIntensity;
   float SpotLightRangeRcp;
   float SpotLightCosOuterCone;
   float SpotLightCosInnerCone;
   bool  SpotLightCastShadow;
};
 
struct Material
{
   vec3 Normal;
   vec3 DiffuseColor;
   vec3 SpecularColor;
   float  SpecularExp;
};

vec3 CalculateAmbient(vec3 normal, vec3 color)
{
	// Convert from [-1, 1] to [0, 1]
	float up = normal.y * 0.5 + 0.5;

	// Calculate the ambient value
	vec3 ambient = AmbientLowColor + up * (AmbientUpperColor - AmbientLowColor);

	// Apply the ambient value to the color
	return ambient * color;
}

vec3 CalculateDirectionLight(vec3 position, Material material)
{
   //diffuse
   vec3 lightColor = DirectionLightIntensity * DirectionLightColor.rgb;
   float NDotL = clamp(dot(-DirectionLightDir, material.Normal),0.0,1.0);
   vec3 finalColor = lightColor * NDotL * material.DiffuseColor;
   
   //specular
   vec3 ToEye = normalize(CameraPosition - position);
   vec3 reflectVector = reflect(DirectionLightDir,material.Normal);
   float NDotH = clamp(dot(reflectVector, ToEye),0.0,1.0);
   finalColor += lightColor * clamp(pow(NDotH, material.SpecularExp),0.0,1.0) * material.SpecularColor;
   
   return finalColor;
}

vec3 CalculatePointLight(vec3 position, Material material)
{
	vec3 ToEye = normalize(CameraPosition.xyz - position);
    vec3 ToLight = PointLightPos - position;
 
	// range Attenuation
	float DistToLightNorm = 1.0 - clamp(length(ToLight) * PointLightRangeRcp,0.0,1.0);
	float Attn = DistToLightNorm * DistToLightNorm;

	ToLight = normalize(ToLight);

	//diffuse
	float diffuse = clamp(dot(ToLight, material.Normal),0.0,1.0);
    vec3 diffuseColor = PointLightColor * diffuse * material.DiffuseColor;

	vec3 H = normalize(ToEye + ToLight);
	vec3 specularColor = PointLightColor * pow(max(0, dot(H, material.Normal)), material.SpecularExp) * material.SpecularColor;

	return PointLightIntensity *Attn * (diffuseColor + specularColor);
}

vec3 CalculateSpotLight(vec3 position, Material material)
{
	vec3 ToEye = normalize(CameraPosition.xyz - position);
	vec3 ToLight = SpotLightPos - position;
	float LightLength = length(ToLight);
	ToLight = normalize(ToLight);

    // Cone attenuation
	float cosAng = dot(SpotLightDir, -ToLight);
	float conAtt = clamp(cosAng - SpotLightCosOuterCone,0.0,1.0);
	
	conAtt *= conAtt;

	// range Attenuation
	float DistToLightNorm = 1.0 - clamp(LightLength * SpotLightRangeRcp,0.0,1.0);
	float Attn = DistToLightNorm * DistToLightNorm;
	Attn *= conAtt;
 
	//diffuse
	float diffuse = clamp(dot(ToLight, material.Normal),0.0,1.0);
    vec3 diffuseColor = SpotLightColor * diffuse * material.DiffuseColor;

	vec3 H = normalize(ToEye + ToLight);
	vec3 specularColor = PointLightColor * pow(max(0, dot(H, material.Normal)), material.SpecularExp) * material.SpecularColor;

	return SpotLightIntensity *Attn * (diffuseColor + specularColor);
}

float PCFShadowCubeMap(vec3 position)
{
	int selectTexture;
	vec3 lightDir = normalize(position - PointLightPos);
	vec3 dirValue = abs(lightDir);
	if (dirValue.x > dirValue.y && dirValue.x > dirValue.z) // x is max component
	{
		if (lightDir.x < 0)
			selectTexture = 1;
		else
			selectTexture = 0;
	}
	else if (dirValue.y > dirValue.x && dirValue.y > dirValue.z) // y is max component
	{
		if (lightDir.y < 0)
		{
			selectTexture = 3;
		}
		else
		{
			selectTexture = 2;
		}
	}
	else
	{
		if (lightDir.z < 0)
		{
			selectTexture = 5;
		}
		else
		{
			selectTexture = 4;
		}
	}

	vec4 posShadowMap = ShadowMapViewArray[selectTexture] * vec4(position, 1.0);
	posShadowMap = ShadowMapProj * posShadowMap;

	vec3 UVD = posShadowMap.xyz / posShadowMap.w;
	UVD.xyz = 0.5 * UVD.xyz + vec3(0.5,0.5,0.5);

	return texture(ShadowMapTextureCube, lightDir).r < UVD.z ? 0.f : 1.0f;

//	vec3 UVD = posShadowMap.xyz / posShadowMap.w;
//	vec3 Pos = vec3(UVD.x,UVD.y,selectTexture);
//	return texture(ShadowMapTextureCube,Pos).r ; //< UVD.z ? 0.f : 1.0f;

}

 float PCFShadow( vec3 position )
{
	// Transform the world position to shadow projected space
	vec4 posShadowMap = ShadowMapView *vec4(position,1.0);
    posShadowMap = ShadowMapProj * posShadowMap;

	// Transform the position to shadow clip space
	vec3 UVD = posShadowMap.xyz / posShadowMap.w;

	// Convert to shadow map UV values
	UVD.xyz = 0.5 * UVD.xyz + vec3(0.5,0.5,0.5);
	UVD.z -= 0.005;
 
    return texture(ShadowMapTexture2D,UVD);	 
}

Material PrepareMaterial(vec3 normal, vec2 UV)
{
	Material material;

	// Normalize the interpulated vertex normal
	material.Normal = normalize(normal);

	// Sample the texture and convert to linear space
    material.DiffuseColor = texture(DiffuseTexture,UV).xyz * DiffuseColor;
	material.SpecularColor = SpecularColor;
	material.SpecularExp = SpecularExp;
 
	return material;
} 