layout(std140) uniform SceneProperty
{
	int    ScreenWidth;
	int    ScreenHeight;
	int    ShadowMapSize;
	vec3 AmbientLowColor;
	vec3 AmbientUpperColor;

};

layout(std140) uniform CameraTransforms
{
	mat4 CameraView;
	mat4 CameraProjection;	
	mat4 CameraViewProj;
    mat4 CameraViewInv;
	mat4 CameraProjInv;
	mat4 CameraViewProjInv;
	vec3 CameraPosition;
};

layout(std140) uniform ShadowMapGen
{
	mat4 ShadowMapView; 
	mat4 ShadowMapViewArray[6];
	mat4 ShadowMapProj;
};

layout(std140) uniform ObjectTransform
{
	mat4 WorldTransform;
	mat4 WorldNormalTransform;  // translate for normal.
};

layout(std140) uniform MaterialProperty
{
	vec3 DiffuseColor;
	vec3 SpecularColor;
	vec3 EmissiveColor;
	float SpecularExp;	
};

uniform sampler2D DiffuseTexture;
uniform sampler2D ShadowMapTexture2D;
uniform samplerCube ShadowMapTextureCube;

layout(std140) uniform DirectionLightProperty
{
	vec3 DirectionLightColor;
	vec3 DirectionLightDir;	
	float DirectionLightIntensity;
} ;

layout(std140) uniform PointLightProperty
{
    vec3 PointLightPos;
	vec3 PointLightColor;
	float PointLightIntensity;
	float PointLightRangeRcp;
};

layout(std140) uniform SpotLightProperty
{
   vec3 SpotLightPos;
   vec3 SpotLightDir;
   vec3 SpotLightColor;
   float SpotLightIntensity;
   float SpotLightRangeRcp;
   float SpotLightCosOuterCone;
   float SpotLightCosInnerConeRcp;
};
 
struct Material
{
   vec3 Normal;
   vec3 DiffuseColor;
   vec3 SpecularColor;
   float  SpecularExp;
};

vec3 CalculateAmbient(vec3 normal, vec3 color)
{
	// Convert from [-1, 1] to [0, 1]
	float up = normal.y * 0.5 + 0.5;

	// Calculate the ambient value
	vec3 ambient = AmbientLowColor + up * (AmbientUpperColor - AmbientLowColor);

	// Apply the ambient value to the color
	return ambient * color;
}

vec3 CalculateDirectionLight(vec3 position, Material material)
{
   //diffuse
   vec3 lightColor = DirectionLightIntensity * DirectionLightColor.rgb;
   float NDotL = max(dot(-DirectionLightDir, material.Normal),0);
   vec3 finalColor = lightColor * NDotL * material.DiffuseColor;
   
   //specular
   vec3 ToEye = normalize(CameraPosition - position);
   vec3 reflectVector = reflect(DirectionLightDir,material.Normal);
   float NDotH = max(dot(reflectVector, ToEye),0);
   finalColor += lightColor * clamp(pow(NDotH, material.SpecularExp),0.0,1.0) * material.SpecularColor;
   
   return finalColor;
}

vec3 CalculatePointLight(vec3 position, Material material)
{
	vec3 ToEye = normalize(CameraPosition.xyz - position);
    vec3 ToLight = PointLightPos - position;
 
	// range Attenuation
	float DistToLightNorm = 1.0 - clamp(length(ToLight) * PointLightRangeRcp,0.0,1.0);
	float Attn = DistToLightNorm * DistToLightNorm;

	//diffuse
	float diffuse = clamp(dot(ToLight, material.Normal),0.0,1.0);
    vec3 diffuseColor = PointLightColor * diffuse * material.DiffuseColor;
   
    //specular
    vec3 reflectVector = reflect(-ToLight,material.Normal);
	float specular = clamp(dot(reflectVector, ToEye),0.0,1.0);
    vec3 specularColor = PointLightColor * clamp(pow(specular, material.SpecularExp),0.0,1.0) * material.SpecularColor;

	return PointLightIntensity *Attn * (diffuseColor + specularColor);
}

vec3 CalculateSpotLight(vec3 position, Material material)
{
	vec3 ToEye = normalize(CameraPosition.xyz - position);
	vec3 ToLight = SpotLightPos - position;

    // Cone attenuation
	float cosAng = dot(-SpotLightDir, ToLight);
	float conAtt = clamp((cosAng - SpotLightCosOuterCone) * SpotLightCosInnerConeRcp,0.0,1.0);
	conAtt *= conAtt;

	// range Attenuation
	float DistToLightNorm = 1.0 - clamp(length(ToLight) * SpotLightRangeRcp,0.0,1.0);
	float Attn = DistToLightNorm * DistToLightNorm;
	Attn *= conAtt;
   
    //diffuse
	float diffuse = clamp(dot(ToLight, material.Normal),0.0,1.0);
    vec3 diffuseColor = SpotLightColor * diffuse * material.DiffuseColor;
   
    //specular
    vec3 reflectVector = reflect(-ToLight,material.Normal);
	float specular = clamp(dot(reflectVector, ToEye),0.0,1.0);
	vec3 specularColor = SpotLightColor * clamp(pow(specular, material.SpecularExp),0.0,1.0) * material.SpecularColor;

	return SpotLightIntensity *Attn * (diffuseColor + specularColor);
}

float PCFShadowCubeMap(vec3 position)
{
	mat4 selectShadowMat;
	vec3 lightDir = normalize(position - PointLightPos);
	vec3 dirValue = abs(lightDir);
	if (dirValue.x > dirValue.y && dirValue.x > dirValue.z) // x is max component
	{
		//lightDir.z = -lightDir.z;   // right hand coordinate to left hand....
		if (lightDir.x < 0)
			selectShadowMat = ShadowMapViewArray[1];
		else
			selectShadowMat = ShadowMapViewArray[0];
	}
	else if (dirValue.y > dirValue.x && dirValue.y > dirValue.z) // y is max component
	{
		if (lightDir.y < 0)
		{
			selectShadowMat = ShadowMapViewArray[3];
		//	lightDir.x = -lightDir.x;
		}
		else
		{
			selectShadowMat = ShadowMapViewArray[2];
		//	lightDir.z = -lightDir.z;
		}
	}
	else
	{
		//lightDir.x = -lightDir.x;
		if (lightDir.z < 0)
		{
			selectShadowMat = ShadowMapViewArray[5];
		}
		else
		{
			selectShadowMat = ShadowMapViewArray[4];
		}
	}

	vec4 posShadowMap = selectShadowMat * vec4(position, 1.0);
	posShadowMap = ShadowMapProj * posShadowMap;

	vec3 UVD = posShadowMap.xyz / posShadowMap.w;
	//UVD.xyz = 0.5 * UVD.xyz + 0.5;
	//vec3 texPos = vec3(UVD.x,UVD.y,0);
	//lightDir = vec3(1,0,0);
	float depth =  texture(ShadowMapTextureCube,lightDir).r;

	//return depth;

	if (UVD.z >= depth)
	    return 1.0f;
	else
	    return 0;

}

 float PCFShadow( vec3 position )
{
	// Transform the world position to shadow projected space
	vec4 posShadowMap = ShadowMapView *vec4(position,1.0);
    posShadowMap = ShadowMapProj * posShadowMap;

	// Transform the position to shadow clip space
	vec3 UVD = posShadowMap.xyz / posShadowMap.w;

	// Convert to shadow map UV values
	UVD.xyz = 0.5 * UVD.xyz + 0.5;

	//UVD.z -= 0.005f;
	 
	 return texture(ShadowMapTexture2D,UVD.xy).r < UVD.z ? 0.f : 1.0f;
	 //float offset = 1.0f / 1024;
	/* vec4 vshadow;
	 vshadow.x = texture(ShadowMapTexture2D,UVD.xy).r < UVD.z ? 0.f : 1.0f;
	 vshadow.y = texture(ShadowMapTexture2D,UVD.xy + vec2(offset, 0)).r < UVD.z ? 0.f : 1.0f;
	 vshadow.z = texture(ShadowMapTexture2D,UVD.xy + vec2(0, offset)).r < UVD.z ? 0.f : 1.0f;
	 vshadow.w = texture(ShadowMapTexture2D,UVD.xy + vec2(offset, offset)).r < UVD.z ? 0.f : 1.0f;

	 return mix(vshadow.x, vshadow.y, 0.5);
	 return mix(mix(vshadow.x, vshadow.y, 0.5),
		                     mix(vshadow.z, vshadow.w, 0.5),
		                     0.5);*/
 
   // return texture(ShadowMapTexture2D, UVD);
	/*float offset = 1.0f / ShadowMapSize;
	// Compute the hardware PCF value
	vec4 vshadow;
	vshadow.x = texture(ShadowMapTexture2D, UVD);
	vshadow.y = texture(ShadowMapTexture2D,UVD + vec3(offset, 0,0));
	vshadow.z = texture(ShadowMapTexture2D,UVD + vec3(0, offset,0));
	vshadow.w = texture(ShadowMapTexture2D,UVD + vec3(offset, offset,0));
	
	return mix(mix(vshadow.x, vshadow.y, 0.5),
		                     mix(vshadow.z, vshadow.w, 0.5),
		                     0.5);*/
}

Material PrepareMaterial(vec3 normal, vec2 UV)
{
	Material material;

	// Normalize the interpulated vertex normal
	material.Normal = normalize(normal);

	// Sample the texture and convert to linear space
    material.DiffuseColor = texture(DiffuseTexture,UV).xyz * DiffuseColor;
	material.SpecularColor = SpecularColor;
	material.SpecularExp = SpecularExp;
 
	return material;
} 