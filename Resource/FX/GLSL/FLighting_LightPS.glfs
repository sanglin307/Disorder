#version 330
#extension GL_ARB_shading_language_include : require

#include </glsl/common.gls>

in VSOut
{
    vec3 NormalWorld; 
	vec3 PositionWorld;
};

out vec4 Color;

Material PrepareMaterial(vec3 normal, vec2 UV)
{
	Material material;

	// Normalize the interpulated vertex normal
	material.Normal = normalize(normal);

	// Sample the texture and convert to linear space
    material.DiffuseColor = DiffuseColor;
	material.SpecularColor = SpecularColor;
	material.SpecularExp = SpecularExp;
 
	return material;
} 

//--------------------------------------------------------------------------------------
// Pixel Shader
//--------------------------------------------------------------------------------------
 
void main(void)
{
    Material mat = PrepareMaterial(NormalWorld,vec2(0,0));

	vec3 finalColor = CalculateAmbient(mat.Normal,mat.DiffuseColor);

	finalColor += CalculateDirectionLight(PositionWorld,mat);

    Color = vec4(finalColor,1.0f);
}

