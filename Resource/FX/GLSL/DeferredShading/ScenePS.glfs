#version 330
#extension GL_ARB_shading_language_include : require

#include </common.gls>
#include </deferredshading/common.gls>

layout (location = 0) out vec4 color0;
layout (location = 1) out vec3 color1;
layout (location = 2) out vec4 color2;


in block
{
    vec3 NormalWorld; 
	vec3 PositionWorld;
} In;


void main(void)
{
    // Lookup mesh texture and modulate it with diffuse
   // float3 DiffuseColor = DiffuseTexture.Sample( LinearSampler, In.UV );
	//DiffuseColor *= DiffuseColor;

	vec3 Normal = normalize(In.NormalWorld);

	color0 = vec4(DiffuseColor.rgb, SpecularExp / 10.f);  // map to [0,1]
	color1 = vec3(Normal * 0.5 + 0.5);
	color2 = vec4(SpecularColor,0.0);

}