#include "Common.dsf"


struct VS_INPUT
{
    float3 Position  : POSITION;
    float3 Normal : NORMAL;
};

//--------------------------------------------------------------------------------------
struct VS_OUTPUT
{
    float4 Position : SV_POSITION;
    float3 NormalWorld: TEXCOORD0; 
	float3 PositionWorld: TEXCOORD1;
};

VS_OUTPUT RenderSceneVS( VS_INPUT input )
{   
    VS_OUTPUT output;
    output.Position = mul( float4(input.Position,1.0f),WorldTransform);
	output.PositionWorld = output.Position.xyz;
    output.Position = mul( output.Position, CameraView );
    output.Position = mul( output.Position, CameraProjection );
    output.NormalWorld = mul(float4(input.Normal,1.0),WorldNormalTransform).xyz;
	
    return output;
}

/////////////////////////////////////////////////////////////////////////////
// Pixel shader
/////////////////////////////////////////////////////////////////////////////

struct PS_GBUFFER_OUT
{
	float4 ColorShiness : SV_TARGET0;
	float4 Normal : SV_TARGET1;
	float4 SpecColor : SV_TARGET2;
};

PS_GBUFFER_OUT PackGBuffer(float3 BaseColor, float3 Normal, float3 SpecColor, float SpecPower)
{
	PS_GBUFFER_OUT Out;
 
	// Pack all the data into the GBuffer structure
	Out.ColorShiness = float4(BaseColor.rgb, SpecPower);
	Out.Normal = float4(Normal * 0.5 + 0.5, 0.0);
	Out.SpecColor = float4(SpecColor,0.0);

	return Out;
}

PS_GBUFFER_OUT RenderScenePS( VS_OUTPUT In )
{ 
    // Lookup mesh texture and modulate it with diffuse
   // float3 DiffuseColor = DiffuseTexture.Sample( LinearSampler, In.UV );
	//DiffuseColor *= DiffuseColor;

	return PackGBuffer(DiffuseColor, normalize(In.NormalWorld), SpecularColor, Shininess);
}
